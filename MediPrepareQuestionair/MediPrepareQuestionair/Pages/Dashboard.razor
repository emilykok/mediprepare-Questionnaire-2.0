@page "/dashboard"
@using MediPrepareQuestionair.Services
@inject AnswerCollectionService AnswerCollectionService
@using MediPrepareQuestionair.Models
@using MediPrepareQuestionair.Database
@using System.Text
@using MediPrepareQuestionair.Extensions
<MudContainer Class="d-flex flex-wrap gap-4" MaxWidth="MaxWidth.ExtraExtraLarge">
    <MediChartComponent
        TItem="AnswerForm"
        Items="@AnswerCollectionService.AnswerFormsList"
        Title="Device Type"
        XFunc="e => e.DeviceType"
        YFunc="e => e.Select(x => x.DeviceType).Count()"/>
    <MediChartComponent
        TItem="AnswerForm"
        Items="@AnswerCollectionService.AnswerFormsList"
        Title="Issued Forms"
        XFunc="e => e.ReferenceForm.DisplayName"
        YFunc="e => e.Select(x => x.ReferenceForm.FormName).Count()"/>
    <MediChartComponent 
        TItem="AnswerForm" 
        Items="@AnswerCollectionService.AnswerFormsList" 
        Title="Operating System"
        XFunc="e => e.OperatingSystem"
        YFunc="e => e.Select(x => x.OperatingSystem).Count()"/>
    <MediChartComponent 
        TItem="AnswerQuestion" 
        Items="@AnswerCollectionService.AnswerFormsList.SelectMany(x=>x.AnswerSections.SelectMany(x=>x.AnswerQuestions))" 
        Title="Questions Answered"
        XFunc="GetAnswerQuestionValue"
        YFunc="GetAnswerQuestionValueCount"/>
    <MediBarChart 
        TItem="AnswerQuestion"
        Items="AllAnswerQuestions()"
        Title="Questions Answered"
        XFunc="GetAnswerQuestionValue"
        YFunc="GetAnswerQuestionValueCountList"
        
    />
    <MediBarChart 
            TItem="AnswerQuestion"
            Items="AllAnswerQuestions()"
            Title="Questions Answered"
            XFunc="GetAnswerQuestionValue"
            YFunc="Procentile"
    />
</MudContainer>

@code{
    //Func that return the Key of the AnswerQuestion 
    private Func<AnswerQuestion, string> GetAnswerQuestionValue = (e) => e.ReferenceQuestion.DisplayName;
    Func<IEnumerable<AnswerQuestion>, decimal?> GetAnswerQuestionValueCount = (questions) => questions.Count(x => x.IsFilledIn());
    private static bool isFilledIn(AnswerQuestion answerQuestion)
    {
        return answerQuestion.IsFilledIn();
    }
    private IEnumerable<AnswerQuestion> AllAnswerQuestions() => AnswerCollectionService.AnswerFormsList.SelectMany(x => x.AnswerSections.SelectMany(x => x.AnswerQuestions));

    static Func<IEnumerable<AnswerQuestion>, decimal?> Procentiles = (questions) =>
    {
        var result = questions.PercentileThat(isFilledIn);
        return (decimal?)result;
    };
    
    Dictionary<string, Func<IEnumerable<AnswerQuestion>, decimal?>> GetAnswerQuestionValueCountList = new()
    {
        {"Filled in", (e=> e.Count(x=>x.IsFilledIn()))},
        {"Total served", (e=> e.Count())},
    };

    Dictionary<string, Func<IEnumerable<AnswerQuestion>, decimal?>> Procentile = new()
    {
        {"% Filled in", Procentiles},
    };




}