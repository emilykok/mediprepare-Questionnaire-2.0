@page "/Form/{FormSlug}"
@page "/Form/{FormSlug}/{Slug}"
@*What Does this mean? Formslug is the ID of the form, Slug is the Section ID*@
@using MediPrepareQuestionair.Database
@using MediPrepareQuestionair.Data
@using System.Diagnostics
@using System.Text.Json
@using InfluxDB.Client.Api.Domain
@using InfluxDB.Client.Writes
@using MediPrepareQuestionair.Extensions
@using MediPrepareQuestionair.Models
@using MediPrepareQuestionair.Services
@inject ISessionIdGenerator SessionIdGenerator
@inject InfluxDbService InfluxDbService
@inject TestDataFormService TestDataFormService
@inject IBlazorCurrentDeviceService BlazorCurrentDeviceService
@inject NavigationManager NavigationManager
@inject AnswerCollectionService AnswerCollectionService
@using Color = MudBlazor.Color

@if (AnswerSection != null && answerForm != null && answerForm.ReferenceForm != null && shouldRender )
{
<MudCard>
    <MudCardHeader>TestData</MudCardHeader>
    <MudCardContent>
        <h3>Form</h3>
        <p>@FormGuid</p>
        <h3>Section</h3>
        <p>@Guid</p>
        <h3>AnswerForm</h3>
        <p>@answerForm.Id</p>
        <p>@answerForm.TimeStamp.ToString("yy-MM-dd")</p>
        <p>@DebugText</p>
    </MudCardContent>
</MudCard>


    <h4>@AnswerSection.ReferenceSection.DisplayName</h4>
    foreach (var question in AnswerSection.AnswerQuestions)
    {
        <QuestionComponent QuestionEventCallback="MeasureMentCallback" QuestionEvents="answerForm.QuestionEventInputs" answerQuestion="question" />
    }
    <MudButton OnClick="OnNextPress" Variant="Variant.Filled" Color="Color.Primary">Next</MudButton>
    @if (NextDisabled)
    {
        
        <MudButton OnClick="OnNextPress" Variant="Variant.Filled" Color="Color.Primary">Finnish</MudButton>
    }
}
else
{
    <h1>Form not found</h1>
    <p>Debug</p>
    foreach (var form in TestDataFormService.Forms)
    {
        <p>@form.Id</p>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string? Slug { get; set; }
    [Parameter]
    public string? FormSlug { get; set; }
    private bool shouldRender = false;
    
    public Guid? Guid => System.Guid.TryParse(Slug, out var guud) ? guud : null;
    public Guid? FormGuid => System.Guid.TryParse(FormSlug, out var guud) ? guud : null;
    
    public string DebugText { get; set; }

    private AnswerForm answerForm { get; set; }
    private AnswerSection AnswerSection { get; set; }
    private Stopwatch timer;
    protected override void OnInitialized()
    {
        Console.WriteLine($"OnInitialized");
        base.OnInitialized();
    }

    protected override Task OnParametersSetAsync()
    {
        Console.WriteLine($"OnParametersSetAsync");
        if (FormSlug == default || FormGuid == null) return base.OnParametersSetAsync();
        timer = Stopwatch.StartNew();
        OninitForm();
        if(answerForm?.ReferenceForm?.Sections == null) return base.OnParametersSetAsync();
        return base.OnParametersSetAsync();
    }
    string Orientation { get; set; }
    string Type { get; set; }
    string OS { get; set; }
    bool NextDisabled { get; set; } = false;
    
    public string SessionId { get; set; }
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            Console.WriteLine($"OnAfterRenderAsync");
            OS = await BlazorCurrentDeviceService.OS();
            Orientation = await BlazorCurrentDeviceService.Orientation();
            Type = await BlazorCurrentDeviceService.Type();
            SessionId = await SessionIdGenerator.GetAndOrGenerateSessionId();
            OninitForm();
            if (answerForm == null) return;
            answerForm.SessionId = SessionId;
            answerForm.OperatingSystem = OS;
            answerForm.DeviceType = Type;
            answerForm.ScreenOrientation = Orientation;
           
        }
        if (answerForm == null) return;
        var index = answerForm.ReferenceForm.Sections.IndexOf(AnswerSection.ReferenceSection); 
        NextDisabled = index + 1 >= answerForm.ReferenceForm.Sections.Count;
        //Serialze options
        JsonSerializerOptions options = new JsonSerializerOptions
        {
            WriteIndented = true,
            MaxDepth = 20,
        };
        DebugText = answerForm.ToDebugText();
        StateHasChanged();
    }


    private void MeasureMentCallback(QuestionEventInput ms)
    {
        InfluxDbService.WritePoint(
            PointData.Measurement("QuestionEvent")
                .Now()
                .Tag("questionid", ms.QuestionId.ToString())
                .Tag("session", ms.SessionId)
                .Tag("EventName", ms.EventName)
                .Field("value", ms.Value)
                
        );
        InfluxDbService.WriteMeasurement(ms);
    }

    private void OninitForm()
    {
        if(SessionId == null || SessionId == default ) return; //wait for OnAfterRenderAsync
        var form = TestDataFormService.Forms.FirstOrDefault(x => x.Id == FormGuid);
        if (form == default) return; //wait for OnParametersSetAsync
        answerForm = AnswerCollectionService.PrepareNewAnswerform(SessionId, form);
        answerForm.SessionId = SessionId;
        
        if (Guid == null || Guid == default)
        {
            AnswerSection =answerForm.AnswerSections.FirstOrDefault();
        }
        else
        {
            AnswerSection = answerForm.AnswerSections.FirstOrDefault(x => x.ReferenceSection.Id == Guid);
        }
        //Check if this section is the last section
        var index = answerForm.ReferenceForm.Sections.IndexOf(AnswerSection.ReferenceSection); 
        NextDisabled = index + 1 >= answerForm.ReferenceForm.Sections.Count;
        shouldRender = true;
        StateHasChanged();
    }
    private void OnNextPress()
    {
        shouldRender = false;
        AnswerSection.TimeTaken = timer == null ? timer.Elapsed : TimeSpan.Zero;
        Console.WriteLine(AnswerSection.TimeTaken.ToString("mm\\:ss\\.ff"));
        //Go to next section
        //Index of current section
        var index = answerForm.ReferenceForm.Sections.IndexOf(AnswerSection.ReferenceSection); 
        Console.WriteLine($"Index: {index}");
        Console.WriteLine($"Count: {answerForm.ReferenceForm.Sections.Count}");
        AnswerCollectionService.LogForms();
        //If there is a next section
        if (index + 1 < answerForm.ReferenceForm.Sections.Count)
        {
            //Go to next section
            NavigationManager.NavigateTo($"/form/{FormGuid}/{answerForm.ReferenceForm.Sections[index + 1].Id}");
        }
        else
        {
            //Go to next form
            NavigationManager.NavigateTo($"/");
        }
    }
}