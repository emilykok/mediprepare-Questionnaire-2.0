@using MediPrepareQuestionair.Database
@using Color = MudBlazor.Color
@using Orientation = MudBlazor.Orientation

<MudContainer Class="pa-2" MaxWidth="MaxWidth.Small">
    @if (answerQuestion == null)
    {
        <MudSkeleton SkeletonType="SkeletonType.Text" Animation="Animation.Pulse" />
    }
    else
    {
        <MudCard Style="min-height: 200px;">
            <MudContainer MaxWidth="MaxWidth.Small">
                @if (answerQuestion?.ReferenceQuestion?.Type == QuestionType.Text)
                {
                    <MudTextField OnBlur="TextFieldLostFocus" Label="@answerQuestion?.ReferenceQuestion?.DisplayName" @bind-Value="@answerQuestion.Value[0].Value"/>
                }
                else if (answerQuestion?.ReferenceQuestion?.Type == QuestionType.SelectOne)
                {
                    <MudText Typo="Typo.h5">@answerQuestion.ReferenceQuestion.DisplayName</MudText>
                    <MudRadioGroup SelectedOption="@answerQuestion.Value[0].Value" T="string" SelectedOptionChanged="RadioButtonChangedEvent">
                        @foreach (var option in answerQuestion?.ReferenceQuestion?.Options)
                        {
                            <MudRadio T="string" Color="Color.Primary" Option="@option.Option" Label="@option.Option" Value="@option.Option">@option.Option</MudRadio>
                            <MudDivider/>
                        }
                    </MudRadioGroup>
                }
                else if (answerQuestion?.ReferenceQuestion?.Type == QuestionType.Date)
                {
                    <MudSwipeArea OnSwipe="@OnSwipe">
                        <MudDatePicker Orientation="Orientation.Landscape" OpenTo="OpenTo.Month" Rounded="true" Elevation="6" PickerVariant="PickerVariant.Static" Label="@answerQuestion.ReferenceQuestion.DisplayName" @bind-Date="@(Date)"/>
                    </MudSwipeArea>
                }

                else if (answerQuestion?.ReferenceQuestion?.Type == QuestionType.Numeric)
                {
                    <MudNumericField OnBlur="TextFieldLostFocus" Label="@answerQuestion?.ReferenceQuestion?.DisplayName" @bind-Value="@Number"/>
                }
                else if (answerQuestion?.ReferenceQuestion?.Type == QuestionType.MultipleChoice)
                {
                    <MudText Typo="Typo.h5">@answerQuestion.ReferenceQuestion.DisplayName</MudText>
                    foreach (var option in answerQuestion.Value)
                    {
                        <MudCheckBox T="bool" Checked="@(option.Value == "True")" CheckedChanged="(e) => CheckBoxChanged(option, e)">@option.Key</MudCheckBox>
                    }
                }
            </MudContainer>
        </MudCard>
    }
</MudContainer>


@code {
    [Parameter]
    public AnswerQuestion answerQuestion { get; set; }
    [Parameter]
    public IList<QuestionEventInput> QuestionEvents { get; set; }
    [Parameter]
    public EventCallback<QuestionEventInput> QuestionEventCallback { get; set; }

    public DateTime? Date
    {
        get => DateTime.TryParse(answerQuestion?.Value[0]?.Value, out var time) ?  time :  DateTime.Now;
        set => answerQuestion.Value[0].Value = value.HasValue ? value.Value.ToString("yyyy-MM-dd") : DateTime.Now.ToString("yyyy-MM-dd");
    }

    public int? Number
    {
        get => Int32.TryParse(answerQuestion?.Value[0]?.Value, out var num) ? num : null;
        set => answerQuestion.Value[0].Value = value.HasValue ? value.Value.ToString() : "0";
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        //Move this to the class
        answerQuestion.Value = new();
        
        if (answerQuestion?.ReferenceQuestion?.Type == QuestionType.SelectOne)
        {
            answerQuestion.Value.Add(new QuestionAnswerValue()
            {
                Value = "",
                Key = answerQuestion?.ReferenceQuestion?.DisplayName
            });
        }
        else if (answerQuestion?.ReferenceQuestion?.Type == QuestionType.MultipleChoice)
        {
            answerQuestion.Value = answerQuestion?.ReferenceQuestion?.Options?.Select(x => new QuestionAnswerValue()
            {
                Value = "",
                Key = x.Option,
            }).ToList()!;
        }
        else
        {
            answerQuestion.Value.Add(new QuestionAnswerValue()
            {
                Value = "",
                Key = answerQuestion?.ReferenceQuestion?.DisplayName
            });
        }
        
    }
    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight)
        {
            Date = Date.Value.AddMonths(-1);
            StateHasChanged();
        }
        else if (direction == SwipeDirection.RightToLeft)
        {
            Date = Date.Value.AddMonths(1);
            StateHasChanged();
        }
        QuestionEventCallback.InvokeAsync(new QuestionEventInput()
        {
            QuestionId = answerQuestion.ReferenceQuestion.Id,
            Id = Guid.NewGuid(),
            EventName = $"DateChangedSwipe",
            TimeStamp = DateTime.UtcNow,
            Value = SwipeDirection.LeftToRight == direction ? "Right" : "Left",
            SessionId = answerQuestion.AnswerSection.AnswerForm.SessionId
        });
    }
    public void HandleCheckedChanged(ChangeEventArgs e)
    {
        e.Value = @"true";
    }


    private void CheckBoxChanged(QuestionAnswerValue? obj, bool? value)
    {
        var Qevent = new QuestionEventInput()
        {
            QuestionId = answerQuestion.ReferenceQuestion.Id,
            Id = Guid.NewGuid(),
            EventName = $"CheckboxChanged",
            TimeStamp = DateTime.UtcNow,
            Value = obj.Key,
            SessionId = answerQuestion.AnswerSection.AnswerForm.SessionId
        };
        QuestionEvents.Add(Qevent);
        QuestionEventCallback.InvokeAsync(Qevent);
        obj.Value = (value).ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void RadioButtonChangedEvent(string value)
    {
        answerQuestion.Value[0].Value = value;
        var QEvent = new QuestionEventInput()
        {
            QuestionId = answerQuestion.ReferenceQuestion.Id,
            Id = Guid.NewGuid(),
            EventName = $"RadioButtonChanged",
            TimeStamp = DateTime.UtcNow,
            Value = value,
            SessionId = answerQuestion.AnswerSection.AnswerForm.SessionId
        };
        QuestionEvents.Add(QEvent);
        QuestionEventCallback.InvokeAsync(QEvent);
    }

    private void TextFieldLostFocus()
    {
        var QEvent = new QuestionEventInput()
        {
            QuestionId = answerQuestion.ReferenceQuestion.Id,
            Id = Guid.NewGuid(),
            EventName = $"TextFieldLostFocus",
            TimeStamp = DateTime.UtcNow,
            SessionId = answerQuestion.AnswerSection.AnswerForm.SessionId
        };
        QuestionEvents.Add(QEvent);
        QuestionEventCallback.InvokeAsync(QEvent);
    }

}